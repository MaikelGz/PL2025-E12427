Elabórame un compilador en Python para el lenguaje Pascal standard, debe ser capaz de interpretar y traducir código Pascal a un formato intermedio y, desde este, a código máquina o directamente a código máquina.

Partes del código:

Análisis Léxico

Implementar un analizador léxico (lexer) para convertir código Pascal en una lista de tokens.

Utilizar la herramienta ply.lex en la implementación del analizador léxico.

Identificar palabras clave, identificadores, números, operadores y símbolos especiales.

Análisis Sintáctico

Construir un analizador sintáctico (parser) para validar la estructura gramatical del código.

Utilizar la herramienta ply.yacc en la implementación del analizador sintáctico.

Análisis Semántico

Verificar tipos de datos, declaración de variables y coherencia del código.

Generación de Código

Generar una representación intermedia del programa reconocido para luego generar el código de la VM mediante un recorrido sobre esta representación.

Requisitos
El compilador debe ser capaz de procesar programas en Pascal estándar, incluyendo declaración de variables, expresiones aritméticas, instrucciones de control de flujo (if, while, for) y, opcionalmente, subprogramas (procedure y function).

Ejemplos de programas Pascal a utilizar:

Exemplo 1: Olá, Mundo!
program HelloWorld;
begin
 writeln('Ola, Mundo!');
end.
Exemplo 2: Maior de 3
program Maior3;
var
 num1, num2, num3, maior: Integer;
begin
 { Ler 3 números }
 Write('Introduza o primeiro número: ');
 ReadLn(num1);

 Write('Introduza o segundo número: ');
 ReadLn(num2);

 Write('Introduza o terceiro número: ');
 ReadLn(num3);

 { Calcular o maior }
 if num1 > num2 then
 if num1 > num3 then maior := num1
 else maior := num3
 else
 if num2 > num3 then maior := num2
 else maior := num3;

 { Escrever o resultado }
 WriteLn('O maior é: ', maior)
end.
Exemplo 3: Fatorial
program Fatorial;
var
 n, i, fat: integer;
begin
 writeln('Introduza um número inteiro positivo:');
 readln(n);
fat := 1;
 for i := 1 to n do
 fat := fat * i;
 writeln('Fatorial de ', n, ': ', fat);
end.
Exemplo 4: Verificação de Número Primo
program NumeroPrimo;
var
 num, i: integer;
 primo: boolean;
begin
 writeln('Introduza um número inteiro positivo:');
 readln(num);
 primo := true;
 i := 2;
 while (i <= (num div 2)) and primo do
 begin
 if (num mod i) = 0 then
 primo := false;
 i := i + 1;
 end;
 if primo then
 writeln(num, ' é um número primo')
 else
 writeln(num, ' não é um número primo')
end.
Exemplo 5: Soma de uma lista de inteiros
program SomaArray;
var
 numeros: array[1..5] of integer;
 i, soma: integer;
begin
 soma := 0;
 writeln('Introduza 5 números inteiros:');
 for i := 1 to 5 do
 begin
 readln(numeros[i]);
 soma := soma + numeros[i];
 end;
 writeln('A soma dos números é: ', soma);
end.
Exemplo 6: Conversão binário-decimal
program BinarioParaInteiro;
var
 bin: string;
 i, valor, potencia: integer;
begin
 writeln('Introduza uma string binária:');
 readln(bin);
 valor := 0;
 potencia := 1;
 for i := length(bin) downto 1 do
 begin
 if bin[i] = '1' then
 valor := valor + potencia;
 potencia := potencia * 2;
 end;

 writeln('O valor inteiro correspondente é: ', valor);
end.
Exemplo 7: Conversão binário-decimal (c/ uma função)
program BinarioParaInteiro;
function BinToInt(bin: string): integer;
var
 i, valor, potencia: integer;
begin
 valor := 0;
 potencia := 1;

 for i := length(bin) downto 1 do
 begin
 if bin[i] = '1' then
 valor := valor + potencia;
 potencia := potencia * 2;
 end;

 BinToInt := valor;
end;
var
 bin: string;
 valor: integer;
begin
 writeln('Introduza uma string binária:');
 readln(bin);
valor := BinToInt(bin);
 writeln('O valor inteiro correspondente é: ', valor);
end.


---------------------------------------------------------------------------
Base Operations
Integer Operations
ADD: takes n and m from the pile and stacks the result m + n

SUB: takes n and m from the pile and stacks the result m - n

MUL: takes n and m from the pile and stacks the result m x n

DIV: takes n and m from the pile and stacks the result m / n

MOD: takes n and m from the pile and stacks the result m mod n

NOT: takes n from the pile and stacks the result n = 0

INF: takes n and m from the pile and stacks the result m < n

INFEQ: takes n and m from the pile and stacks the result m <= n

SUP: takes n and m from the pile and stacks the result m > n

SUPEQ: takes n and m from the pile and stacks the result m >= n

Float Operations
FADD: takes n and m from the pile and stacks the result m + n

FSUB: takes n and m from the pile and stacks the result m - n

FMUL: takes n and m from the pile and stacks the result m x n

FDIV: takes n and m from the pile and stacks the result m / n

FCOS: takes n from the pile and stacks the result cos(n)

FSIN: takes n from the pile and stacks the result sin(n)

FINF: takes n and m from the pile and stacks the result m < n

FINFEQ: takes n and m from the pile and stacks the result m <= n

FSUP: takes n and m from the pile and stacks the result m > n

FSUPEQ: takes n and m from the pile and stacks the result m >= n

Address Operations
PADD: takes an Integer n and an address a from the pile and stacks the address a + n

String Operations
CONCAT: takes n and m, from the pile and stacks the concatenated strings (string ns + string ms) address

CHRCODE: takes n from the pile, which must be a string, and stacks the ASCII code from the first character

STRLEN: takes n, from the pile and stacks the size of the string

CHARAT: takes n and m, from the pile and stacks the ASCII code from the character in the string m at the position n

Heap Operations
ALLOC integer_n: allocates a structured block, sized n, and stacks its address

ALLOCN: takes an integer n from the pile and allocates a structured block, sized n, and stacks its address

FREE: takes an address a from the pile and frees its allocated structured block

POPST: removes the last structured block from the heap

Equality
EQUAL: takes n and m from the pile and stacks the result n = m

Conversions
ATOI: takes a String Heap address from the pile and stacks its string's conversion to an integer (it fails if the string doesn't represent an integer)

ATOF: takes a String Heap address from the pile and stacks its string's conversion to a real number (it fails if the string doesn't represent a real number)

ITOF: takes an integer from the pile and stacks its conversion to a real number

FTOI: takes a real number from the pile and stacks its conversion to a whole number - by removing its decimals

STRI: takes an integer from the pile, converts it to a string and stacks its address

STRF: takes a real number from the pile, converts it to a string and stacks its address

Data Manipulation
Stacking
PUSHI integer_n: stacks n

PUSHN integer_n: stacks n times the integer 0

PUSHF real_number_n: stacks n

PUSHS string_n: archives s in the String Heap and stacks its address

PUSHG integer_n: stacks the value found in gp[n]

PUSHL integer_n: stacks the value found in fp[n]

PUSHSP: stacks the value of the register sp

PUSHFP: stacks the value of the register fp

PUSHGP: stacks the value of the register gp

PUSHST integer_n: pushes the address of the struct heap at index n to the stack

LOAD integer_n: takes an address a from the pile and stacks the value found in a[n] in the pile or in the heap (depending on a)

LOADN: takes an integer n and an address a from the pile and stacks the value found in a[n] in the pile or in the heap (depending on a)

DUP integer_n: duplicates and stacks n times the value of the top of the pile

DUPN: takes the integer n from the pile and duplicates and stacks n times the value of the top of the pile

COPY integer_n: copies the n values of the top of the pile and stacks them in the same order

COPYN: takes the integer n from the pile and copies and stacks the n values of the top of the pile in the same order

Taking from Stack
POP integer_n: takes n values from the pile

POPN: takes the integer n from the pile and takes n values m from the pile

Archiving
STOREL integer_n: takes a value from the pile and stores it in fp[n]

STOREG integer_n: takes a value from the pile and stores it in gp[n]

STORE integer_n: takes a value v and an address a and stores v in a[n] in the pile or the heap (depending on a)

STOREN: takes a value v, an integer n and an address a and stores v in a[n] in the pile or the heap (depending on a)

Miscellaneous
CHECK integer_n , integer_p: checks that at the top of the pile there's an integer i such that n <= i <= p (it throws an error if this is false)

SWAP: takes the values v and m from the pile and stacks m followed by n

AND: takes n and m from the pile and stacks the result n && m

OR: takes n and m from the pile and stacks the result n || m

Input-Output
WRITEI: takes an integer from the pile and prints its value

WRITEF: takes a real number from the pile and prints its value

WRITES: takes a String Heap address from the pile and prints its string

WRITELN: prints \n

WRITECHR: takes an integer from the pile and prints its corresponding ASCII character

READ: reads a string from the keyboard, stores it in the String Heap and stacks its address

Control Operations
Program Counter Register Alteration
PUSHA label: stacks label's code address

JUMP label: assigns the label's code address to the register pc

JZ label: takes a value v from the pile and if: v = 0, assigns the label's code address to the register pc v != 0, increments register pc by 1

Procedures
CALL: takes an label's address a from the pile, saves pc and fp in the Call Stack and assigns a to pc and the current sp's value to fp.

RETURN: assigns the current fp's value to sp, reinstates the values fp and pc from the Call Stack and increments pc by 1

Beginning and End
START: assigns sp's value to fp

NOP: doesn't do anything

ERR string_x: throws an error with message x

STOP: stops program execution
