
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COLON COMMA DIVIDE DO DOT ELSE END FUNCTION ID IF INTEGER LPAREN MINUS NUMBER PLUS PROCEDURE PROGRAM REAL RPAREN SEMICOLON STRING THEN TIMES VAR WHILE WRITEprogram : PROGRAM ID SEMICOLON block DOTblock : declarations compound_statementdeclarations : VAR declarations_listdeclarations_list : ID COLON type SEMICOLON declarations_list\n                         | ID COLON type SEMICOLONtype : INTEGER\n            | REALcompound_statement : BEGIN statement_list ENDstatement_list : statement SEMICOLON statement_list\n                      | statement SEMICOLONstatement : ID ASSIGN expression\n                 | IF expression THEN statement ELSE statement\n                 | WRITE LPAREN expression RPARENexpression : NUMBER\n                  | ID\n                  | STRING'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'ID':([2,7,10,16,20,21,26,32,34,38,],[3,12,15,24,15,24,24,15,12,15,]),'SEMICOLON':([3,14,23,24,25,27,28,29,31,36,39,],[4,20,-14,-15,-16,34,-6,-7,-11,-13,-12,]),'VAR':([4,],[7,]),'DOT':([5,9,19,],[8,-2,-8,]),'BEGIN':([6,11,34,37,],[10,-3,-5,-4,]),'IF':([10,20,32,38,],[16,16,16,16,]),'WRITE':([10,20,32,38,],[17,17,17,17,]),'COLON':([12,],[18,]),'END':([13,20,30,],[19,-10,-9,]),'ASSIGN':([15,],[21,]),'NUMBER':([16,21,26,],[23,23,23,]),'STRING':([16,21,26,],[25,25,25,]),'LPAREN':([17,],[26,]),'INTEGER':([18,],[28,]),'REAL':([18,],[29,]),'THEN':([22,23,24,25,],[32,-14,-15,-16,]),'ELSE':([23,24,25,31,35,36,39,],[-14,-15,-16,-11,38,-13,-12,]),'RPAREN':([23,24,25,33,],[-14,-15,-16,36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,],[6,]),'compound_statement':([6,],[9,]),'declarations_list':([7,34,],[11,37,]),'statement_list':([10,20,],[13,30,]),'statement':([10,20,32,38,],[14,14,35,39,]),'expression':([16,21,26,],[22,31,33,]),'type':([18,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block DOT','program',5,'p_program','Lex2.py',66),
  ('block -> declarations compound_statement','block',2,'p_block','Lex2.py',70),
  ('declarations -> VAR declarations_list','declarations',2,'p_declarations','Lex2.py',74),
  ('declarations_list -> ID COLON type SEMICOLON declarations_list','declarations_list',5,'p_declarations_list','Lex2.py',78),
  ('declarations_list -> ID COLON type SEMICOLON','declarations_list',4,'p_declarations_list','Lex2.py',79),
  ('type -> INTEGER','type',1,'p_type','Lex2.py',83),
  ('type -> REAL','type',1,'p_type','Lex2.py',84),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','Lex2.py',88),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','Lex2.py',92),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','Lex2.py',93),
  ('statement -> ID ASSIGN expression','statement',3,'p_statement','Lex2.py',97),
  ('statement -> IF expression THEN statement ELSE statement','statement',6,'p_statement','Lex2.py',98),
  ('statement -> WRITE LPAREN expression RPAREN','statement',4,'p_statement','Lex2.py',99),
  ('expression -> NUMBER','expression',1,'p_expression','Lex2.py',106),
  ('expression -> ID','expression',1,'p_expression','Lex2.py',107),
  ('expression -> STRING','expression',1,'p_expression','Lex2.py',108),
]
